/**
  * @file stwlc68_regs.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief values and constants for the stwlc68 device registers
  * 
  */

#define STWLC68_I2C_ADDRESS 0xC2
#define STWLC68_REG_ADDR_SIZE 1
#define STWLC68_REG_COUNT 94


/*******************************************************************************
  Register Addresses                                                                              
*******************************************************************************/

#define STW_REG_CHIP_ID_ADDR                                       0x00 /* Chip Identifier */
#define STW_REG_CHIP_REV_ADDR                                      0x02 /* Chip Revision */
#define STW_REG_ROM_ID_ADDR                                        0x06 /* ROM Identifier */
#define STW_REG_CFG_ID_ADDR                                        0x08 /* OTP memory configuration ID */
#define STW_REG_TRIM_ID_ADDR                                       0x0A /* Production trimming version ID */
#define STW_REG_PATCH_ID_ADDR                                      0x0C /* OTP patch version ID */
#define STW_REG_INT_EN_ADDR                                        0x10 /* Int En */
#define STW_REG_INT_CLR_ADDR                                       0x12 /* Int Clr */
#define STW_REG_INT_LATCH_ADDR                                     0x14 /* Int Latch */
#define STW_REG_INT_STA_ADDR                                       0x16 /* Int Sta */
#define STW_REG_OTP_LATCH_ADDR                                     0x18 /* OTP Latch */
#define STW_REG_OVP_LATCH_ADDR                                     0x19 /* OVP Latch */
#define STW_REG_OCP_LATCH_ADDR                                     0x1A /* OCP Latch */
#define STW_REG_SYS_ERR0_ADDR                                      0x1C /* SYS Err0 */
#define STW_REG_SYS_ERR1_ADDR                                      0x1D /* SYS Err1 */
#define STW_REG_SYS_ERR2_ADDR                                      0x1E /* SYS Err2 */
#define STW_REG_DIR_CMD_ADDR                                       0x20 /* Dir Cmd */
#define STW_REG_AC_FREQ_ADDR                                       0x38 /* Rectifier Operating Frequency (in kHz) */
#define STW_REG_S_STR_TX_ADDR                                      0x3A /* Signal Strength Level sent to transmitter */
#define STW_REG_VOUT_SET_ADDR                                      0x3C /* Output Voltage setting 25 mV to 22 V (25 mV/step) */
#define STW_REG_VTH_AOE_ADDR                                       0x40 /* Voltage threshold for Automatic Output Enable 240 mV to 1049 mV (16 mV/step) */
#define STW_REG_LCR_THR_ADDR                                       0x41 /* Normal-Current Range (NCR) to Low-Current Range (LCR) threshold (4 mA/step) */
#define STW_REG_LCR_HYST_ADDR                                      0x42 /* Low-Current Range (LCR) to Normal-Current Range (NCR) hysteresis (4 mA/step) */
#define STW_REG_MOD_CFG_ADDR                                       0x43 /* Mod Cfg */
#define STW_REG_IDMYL_SET_ADDR                                     0x44 /* IDMYL Set */
#define STW_REG_VRECT_MIN_ADDR                                     0x45 /* VRECT Min */
#define STW_REG_VDROP_V0_ADDR                                      0x49 /* Linear regulator target drop-out voltage setpoint 0 */
#define STW_REG_VDROP_V1_ADDR                                      0x4A /* Linear regulator target drop-out voltage setpoint 1 */
#define STW_REG_VDROP_V2_ADDR                                      0x4B /* Linear regulator target drop-out voltage setpoint 2 */
#define STW_REG_VDROP_V3_ADDR                                      0x4C /* Linear regulator target drop-out voltage setpoint 3 */
#define STW_REG_VDROP_C1_ADDR                                      0x4D /* Linear regulator target drop-out voltage current threshold 1 */
#define STW_REG_VDROP_C2_ADDR                                      0x4E /* Linear regulator target drop-out voltage current threshold 2 */
#define STW_REG_VDROP_C3_ADDR                                      0x4F /* Linear regulator target drop-out voltage current threshold 3 */
#define STW_REG_MSG_TX0_ADDR                                       0x50 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX1_ADDR                                       0x51 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX2_ADDR                                       0x52 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX3_ADDR                                       0x53 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX4_ADDR                                       0x54 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX5_ADDR                                       0x55 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX6_ADDR                                       0x56 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX7_ADDR                                       0x57 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_MSG_TX8_ADDR                                       0x58 /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
#define STW_REG_EPT_MSG_ADDR                                       0x62 /* EPT Message (root cause event) added to EPT packet (see DIR_CMD register) */
#define STW_REG_FOD_CTC_ADDR                                       0x80 /* FOD Current Threshold Calibration */
#define STW_REG_FOD_GSC_ADDR                                       0x83 /* FOD Gain Scaler Calibration */
#define STW_REG_FOD_OLC_ADDR                                       0x87 /* FOD Offset Level Calibration */
#define STW_REG_FOD_DCR_ADDR                                       0x8B /* Coil DC-Resistance for FOD calculation */
#define STW_REG_VRECT_RE_ADDR                                      0x90 /* Voltage Regulation Error (difference in mV) between actual and target VRECT used to calculate CEP for 0x0091 the transmitter */
#define STW_REG_RPP_TX_ADDR                                        0x92 /* Received Power (comprehensive of losses) level Packet sent to transmitter */
#define STW_REG_SS_MIN_TX_ADDR                                     0x96 /* Minimum Signal-Strength level for proceeding to PING phase */
#define STW_REG_CS_OFFS_ADDR                                       0x97 /* Current sensor offset adjustment (in mA) */
#define STW_REG_IDLE_CC_ADDR                                       0x98 /* Chip idle current consumption (in mA) */
#define STW_REG_PMAX_PTC_ADDR                                      0xA1 /* Maximum power capability established during Power Transfer Contract */
#define STW_REG_TRECT_OTP_ADDR                                     0xA6 /* Over-Temperature detection Threshold related to Rectifier Temperature sensor */
#define STW_REG_TLR_OTP_ADDR                                       0xA8 /* Over-Temperature detection Threshold related to main Linear Regulator Temperature sensor */
#define STW_REG_VNTC_OTP_ADDR                                      0xAA /* Over-Temperature detection Threshold related to external NTC pin */
#define STW_REG_VRECT_OVP_ADDR                                     0xAC /* VRECT Over-Voltage detection Threshold (Adjustable OVP-Clamper) */
#define STW_REG_IRECT_OCP_ADDR                                     0xAE /* IRECT Over-Current detection Threshold */
#define STW_REG_PROT_EN0_ADDR                                      0xC0 /* Prot En */
#define STW_REG_PROT_EN1_ADDR                                      0xC1 /* Prot En */
#define STW_REG_PROT_EN2_ADDR                                      0xC2 /* Prot En */
#define STW_REG_PROT_EPT0_ADDR                                     0xC4 /* Prot Ept */
#define STW_REG_PROT_EPT1_ADDR                                     0xC5 /* Prot Ept */
#define STW_REG_PROT_EPT2_ADDR                                     0xC6 /* Prot Ept */
#define STW_REG_PROT_OD0_ADDR                                      0xC8 /* Prot Ed */
#define STW_REG_PROT_OD1_ADDR                                      0xC9 /* Prot Ed */
#define STW_REG_PROT_OD2_ADDR                                      0xCA /* Prot Ed */
#define STW_REG_MFR_ID1_ADDR                                       0xD3 /* Manufacturer ID (MSByte) */
#define STW_REG_MFR_ID0_ADDR                                       0xD4 /* Manufacturer ID (LSByte) */
#define STW_REG_BDEV_ID3_ADDR                                      0xD5 /* Basic Device ID (MSByte) */
#define STW_REG_BDEV_ID2_ADDR                                      0xD6 /* Basic Device ID */
#define STW_REG_BDEV_ID1_ADDR                                      0xD7 /* Basic Device ID */
#define STW_REG_BDEV_ID0_ADDR                                      0xD8 /* Basic Device ID (LSByte) */
#define STW_REG_XDEV_ID7_ADDR                                      0xD9 /* Extended Device ID (MSByte) */
#define STW_REG_XDEV_ID6_ADDR                                      0xDA /* Extended Device ID */
#define STW_REG_XDEV_ID5_ADDR                                      0xDB /* Extended Device ID */
#define STW_REG_XDEV_ID4_ADDR                                      0xDC /* Extended Device ID */
#define STW_REG_XDEV_ID3_ADDR                                      0xDD /* Extended Device ID */
#define STW_REG_XDEV_ID2_ADDR                                      0xDE /* Extended Device ID */
#define STW_REG_XDEV_ID1_ADDR                                      0xDF /* Extended Device ID */
#define STW_REG_XDEV_ID0_ADDR                                      0xE0 /* Extended Device ID (LSByte) */
#define STW_REG_GPIO0_FS_ADDR                                      0xF0 /* GPIO0 pin Function Selector */
#define STW_REG_GPIO1_FS_ADDR                                      0xF1 /* GPIO1 pin Function Selector */
#define STW_REG_GPIO2_FS_ADDR                                      0xF2 /* GPIO2 pin Function Selector */
#define STW_REG_GPIO3_FS_ADDR                                      0xF3 /* GPIO3 pin Function Selector */
#define STW_REG_GPIO4_FS_ADDR                                      0xF4 /* GPIO4 pin Function Selector */
#define STW_REG_GPIO5_FS_ADDR                                      0xF5 /* GPIO5 pin Function Selector */
#define STW_REG_GPIO6_FS_ADDR                                      0xF6 /* GPIO6 (INT pin) pin Function Selector */
#define STW_REG_VRECT_ADC_ADDR                                     0x150 /* VRECT voltage ADC reading (in mV) */
#define STW_REG_VOUT_ADC_ADDR                                      0x152 /* VOUT voltage ADC reading (in mV) */
#define STW_REG_IRECT_ADC_ADDR                                     0x154 /* IRECT current ADC reading (in mA) */
#define STW_REG_TRECT_ADC_ADDR                                     0x158 /* Rectifier Temperature sensor ADC reading (in °C) */
#define STW_REG_TLR_ADC_ADDR                                       0x15A /* Main Linear Regulator Temperature sensor ADC reading (in °C) */
#define STW_REG_VNTC_ADC_ADDR                                      0x15E /* External NTC pin Voltage ADC reading (in mV) */


/*******************************************************************************
  Fields                                                                              
*******************************************************************************/

/* CHIP_ID Register Fields */
    /* CHIP_ID -> CHIP_ID */
    #define STW_CHIP_ID_CHIP_ID_FIELD_MASK                         0xFFFF /* Chip Identifier */
    #define STW_CHIP_ID_CHIP_ID_FIELD_OFFSET                       0x0000

/* CHIP_REV Register Fields */
    /* CHIP_REV -> CHIP_REV */
    #define STW_CHIP_REV_CHIP_REV_FIELD_MASK                       0xFF /* Chip Revision */
    #define STW_CHIP_REV_CHIP_REV_FIELD_OFFSET                     0x00

/* ROM_ID Register Fields */
    /* ROM_ID -> ROM_ID */
    #define STW_ROM_ID_ROM_ID_FIELD_MASK                           0xFFFF /* ROM Identifier */
    #define STW_ROM_ID_ROM_ID_FIELD_OFFSET                         0x0000

/* CFG_ID Register Fields */
    /* CFG_ID -> CFG_ID */
    #define STW_CFG_ID_CFG_ID_FIELD_MASK                           0xFFFF /* OTP memory configuration ID */
    #define STW_CFG_ID_CFG_ID_FIELD_OFFSET                         0x0000

/* TRIM_ID Register Fields */
    /* TRIM_ID -> TRIM_ID */
    #define STW_TRIM_ID_TRIM_ID_FIELD_MASK                         0xFFFF /* Production trimming version ID */
    #define STW_TRIM_ID_TRIM_ID_FIELD_OFFSET                       0x0000

/* PATCH_ID Register Fields */
    /* PATCH_ID -> PATCH_ID */
    #define STW_PATCH_ID_PATCH_ID_FIELD_MASK                       0xFFFF /* OTP patch version ID */
    #define STW_PATCH_ID_PATCH_ID_FIELD_OFFSET                     0x0000

/* INT_EN Register Fields */
    /* INT_EN -> Flags */
    #define STW_INT_EN_OTP_INT_EN                                  0x0001 /* OTP Int En */
    #define STW_INT_EN_OCP_INT_EN                                  0x0002 /* OCP Int En */
    #define STW_INT_EN_OVP_INT_EN                                  0x0004 /* OVP Int En */
    #define STW_INT_EN_OUT_ON_INT_EN                               0x0040 /* Out On Int En */
    #define STW_INT_EN_OUT_OFF_INT_EN                              0x0080 /* Out Off Int En */
    #define STW_INT_EN_SIG_STR_INT_EN                              0x0400 /* Sig Str Int En */
    #define STW_INT_EN_VRECT_RDY_INT_EN                            0x0800 /* Vrect Rdy Int En */

/* INT_CLR Register Fields */
    /* INT_CLR -> Flags */
    #define STW_INT_CLR_OTP_INT_CLR                                0x0001 /* OTP Int Clr */
    #define STW_INT_CLR_OCP_INT_CLR                                0x0002 /* OCP Int Clr */
    #define STW_INT_CLR_OVP_INT_CLR                                0x0004 /* OVP Int Clr */
    #define STW_INT_CLR_OUT_ON_INT_CLR                             0x0040 /* Out On Int Clr */
    #define STW_INT_CLR_OUT_OFF_INT_CLR                            0x0080 /* Out Off Int Clr */
    #define STW_INT_CLR_SIG_STR_INT_CLR                            0x0400 /* Sig Str Int Clr */
    #define STW_INT_CLR_VRECT_RDY_INT_CLR                          0x0800 /* Vrect Rdy Int Clr */

/* INT_LATCH Register Fields */
    /* INT_LATCH -> Flags */
    #define STW_INT_LATCH_OTP_INT_LATCH                            0x0001 /* OTP Int Latch */
    #define STW_INT_LATCH_OCP_INT_LATCH                            0x0002 /* OCP Int Latch */
    #define STW_INT_LATCH_OVP_INT_LATCH                            0x0004 /* OVP Int Latch */
    #define STW_INT_LATCH_OUT_ON_INT_LATCH                         0x0040 /* Out On Int Latch */
    #define STW_INT_LATCH_OUT_OFF_INT_LATCH                        0x0080 /* Out Off Int Latch */
    #define STW_INT_LATCH_SIG_STR_INT_LATCH                        0x0400 /* Sig Str Int Latch */
    #define STW_INT_LATCH_VRECT_RDY_INT_LATCH                      0x0800 /* Vrect Rdy Int Latch */

/* INT_STA Register Fields */
    /* INT_STA -> Flags */
    #define STW_INT_STA_OTP_INT_STA                                0x0001 /* OTP Int Sta */
    #define STW_INT_STA_OCP_INT_STA                                0x0002 /* OCP Int Sta */
    #define STW_INT_STA_OVP_INT_STA                                0x0004 /* OVP Int Sta */
    #define STW_INT_STA_OUT_ON_INT_STA                             0x0040 /* Out On Int Sta */
    #define STW_INT_STA_OUT_OFF_INT_STA                            0x0080 /* Out Off Int Sta */
    #define STW_INT_STA_SIG_STR_INT_STA                            0x0400 /* Sig Str Int Sta */
    #define STW_INT_STA_VRECT_RDY_INT_STA                          0x0800 /* Vrect Rdy Int Sta */

/* OTP_LATCH Register Fields */
    /* OTP_LATCH -> Flags */
    #define STW_OTP_LATCH_LIN_REG_OTP_LATCH                        0x01 /* Lin Reg OTP Latch */
    #define STW_OTP_LATCH_RECT_OTP_LATCH                           0x02 /* Rect OTP Latch */

/* OVP_LATCH Register Fields */
    /* OVP_LATCH -> Flags */
    #define STW_OVP_LATCH_ADJ_OVPS_LATCH                           0x01 /* Adj OVPS Latch */
    #define STW_OVP_LATCH_FXD_OVPS_LATCH                           0x02 /* Fxd OVPS Latch */

/* OCP_LATCH Register Fields */
    /* OCP_LATCH -> Flags */
    #define STW_OCP_LATCH_OCP_LATCH                                0x01 /* OCP Latch */

/* SYS_ERR0 Register Fields */
    /* SYS_ERR0 -> Flags */
    #define STW_SYS_ERR0_M0_HARD_FAULT_ERR                         0x01 /* M0 Hard Fault Err */
    #define STW_SYS_ERR0_HEADER_SECTION_ERR                        0x02 /* Header Section Err */
    #define STW_SYS_ERR0_ECC_DOUBLE_BIT_ERR                        0x04 /* ECC Double Bit Error */

/* SYS_ERR1 Register Fields */
    /* SYS_ERR1 -> Trimming_Sector_Error */
    #define STW_SYS_ERR1_TRIMMING_SECTOR_ERROR_FIELD_MASK          0x03 /* Trimming Sector Error */
    #define STW_SYS_ERR1_TRIMMING_SECTOR_ERROR_FIELD_OFFSET        0x00
    /* SYS_ERR1 -> Configuration_Sector_Error */
    #define STW_SYS_ERR1_CONFIGURATION_SECTOR_ERROR_FIELD_MASK     0x0C /* Configuration Sector Error */
    #define STW_SYS_ERR1_CONFIGURATION_SECTOR_ERROR_FIELD_OFFSET   0x02
    /* SYS_ERR1 -> Patch_Sector_Error */
    #define STW_SYS_ERR1_PATCH_SECTOR_ERROR_FIELD_MASK             0x30 /* Patch Sector Error */
    #define STW_SYS_ERR1_PATCH_SECTOR_ERROR_FIELD_OFFSET           0x04
    /* SYS_ERR1 -> Chip_Info_Sector_Error */
    #define STW_SYS_ERR1_CHIP_INFO_SECTOR_ERROR_FIELD_MASK         0xC0 /* Chip Info Sector Error */
    #define STW_SYS_ERR1_CHIP_INFO_SECTOR_ERROR_FIELD_OFFSET       0x06

/* SYS_ERR2 Register Fields */
    /* SYS_ERR2 -> OTP_Memory_Trimming_Sector_Error */
    #define STW_SYS_ERR2_OTP_MEMORY_TRIMMING_SECTOR_ERROR_FIELD_MASK 0x03 /* OTP Memory Trimming Sector Error */
    #define STW_SYS_ERR2_OTP_MEMORY_TRIMMING_SECTOR_ERROR_FIELD_OFFSET 0x00

/* DIR_CMD Register Fields */
    /* DIR_CMD -> Flags */
    #define STW_DIR_CMD_SEND_MSG                                   0x0001 /* Send Msg */
    #define STW_DIR_CMD_SEND_EPT                                   0x0004 /* Send EPT */
    #define STW_DIR_CMD_OUT_ON                                     0x0100 /* Out On */
    #define STW_DIR_CMD_OUT_OFF                                    0x0200 /* Out Off */

/* AC_FREQ Register Fields */
    /* AC_FREQ -> AC_FREQ */
    #define STW_AC_FREQ_AC_FREQ_FIELD_MASK                         0xFFFF /* Rectifier Operating Frequency (in kHz) */
    #define STW_AC_FREQ_AC_FREQ_FIELD_OFFSET                       0x0000

/* S_STR_TX Register Fields */
    /* S_STR_TX -> S_STR_TX */
    #define STW_S_STR_TX_S_STR_TX_FIELD_MASK                       0xFF /* Signal Strength Level sent to transmitter */
    #define STW_S_STR_TX_S_STR_TX_FIELD_OFFSET                     0x00

/* VOUT_SET Register Fields */
    /* VOUT_SET -> VOUT_SET */
    #define STW_VOUT_SET_VOUT_SET_FIELD_MASK                       0xFFFF /* Output Voltage setting 25 mV to 22 V (25 mV/step) */
    #define STW_VOUT_SET_VOUT_SET_FIELD_OFFSET                     0x0000

/* VTH_AOE Register Fields */
    /* VTH_AOE -> VTH_AOE */
    #define STW_VTH_AOE_VTH_AOE_FIELD_MASK                         0xFF /* Voltage threshold for Automatic Output Enable 240 mV to 1049 mV (16 mV/step) */
    #define STW_VTH_AOE_VTH_AOE_FIELD_OFFSET                       0x00

/* LCR_HYST Register Fields */
    /* LCR_HYST -> LCR_To_NCR_Hysteresis */
    #define STW_LCR_HYST_LCR_TO_NCR_HYSTERESIS_FIELD_MASK          0x3F /* Low-Current Range (LCR) to Normal-Current Range (NCR) hysteresis (4 mA/step) */
    #define STW_LCR_HYST_LCR_TO_NCR_HYSTERESIS_FIELD_OFFSET        0x00

/* MOD_CFG Register Fields */
    /* MOD_CFG -> Flags */
    #define STW_MOD_CFG_NCR_COMM_MOD_EN                            0x01 /* NCR Comm Mod En */
    #define STW_MOD_CFG_NCR_CLAMP_MOD_EN                           0x02 /* NCR Clamp Mod En */
    #define STW_MOD_CFG_LCR_COMM_MOD_EN                            0x10 /* LCR Comm Mod En */
    #define STW_MOD_CFG_LCR_CLAMP_MOD_EN                           0x20 /* LCR Clamp Mod En */

/* IDMYL_SET Register Fields */
    /* IDMYL_SET -> Dummy_Load_Current */
    #define STW_IDMYL_SET_DUMMY_LOAD_CURRENT_FIELD_MASK            0x1F /* Dummy Load current 0 mA to 310 mA (10 mA/step) */
    #define STW_IDMYL_SET_DUMMY_LOAD_CURRENT_FIELD_OFFSET          0x00

/* VRECT_MIN Register Fields */
    /* VRECT_MIN -> Flags */
    #define STW_VRECT_MIN_VRECT_MIN_CTRL_EN                        0x80 /* VRECT Min Ctrl En */
    /* VRECT_MIN -> Minimum_VRECT_voltage */
    #define STW_VRECT_MIN_MINIMUM_VRECT_VOLTAGE_FIELD_MASK         0x0F /* Minimum VRECT voltage (3.5V to 11V */
    #define STW_VRECT_MIN_MINIMUM_VRECT_VOLTAGE_FIELD_OFFSET       0x00

/* VDROP_V0 Register Fields */
    /* VDROP_V0 -> VDROP_V0 */
    #define STW_VDROP_V0_VDROP_V0_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage setpoint 0 */
    #define STW_VDROP_V0_VDROP_V0_FIELD_OFFSET                     0x00

/* VDROP_V1 Register Fields */
    /* VDROP_V1 -> VDROP_V1 */
    #define STW_VDROP_V1_VDROP_V1_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage setpoint 1 */
    #define STW_VDROP_V1_VDROP_V1_FIELD_OFFSET                     0x00

/* VDROP_V2 Register Fields */
    /* VDROP_V2 -> VDROP_V2 */
    #define STW_VDROP_V2_VDROP_V2_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage setpoint 2 */
    #define STW_VDROP_V2_VDROP_V2_FIELD_OFFSET                     0x00

/* VDROP_V3 Register Fields */
    /* VDROP_V3 -> VDROP_V3 */
    #define STW_VDROP_V3_VDROP_V3_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage setpoint 3 */
    #define STW_VDROP_V3_VDROP_V3_FIELD_OFFSET                     0x00

/* VDROP_C1 Register Fields */
    /* VDROP_C1 -> VDROP_C1 */
    #define STW_VDROP_C1_VDROP_C1_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage current threshold 1 */
    #define STW_VDROP_C1_VDROP_C1_FIELD_OFFSET                     0x00

/* VDROP_C2 Register Fields */
    /* VDROP_C2 -> VDROP_C2 */
    #define STW_VDROP_C2_VDROP_C2_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage current threshold 2 */
    #define STW_VDROP_C2_VDROP_C2_FIELD_OFFSET                     0x00

/* VDROP_C3 Register Fields */
    /* VDROP_C3 -> VDROP_C3 */
    #define STW_VDROP_C3_VDROP_C3_FIELD_MASK                       0xFF /* Linear regulator target drop-out voltage current threshold 3 */
    #define STW_VDROP_C3_VDROP_C3_FIELD_OFFSET                     0x00

/* MSG_TX0 Register Fields */
    /* MSG_TX0 -> MSG_TX0 */
    #define STW_MSG_TX0_MSG_TX0_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX0_MSG_TX0_FIELD_OFFSET                       0x00

/* MSG_TX1 Register Fields */
    /* MSG_TX1 -> MSG_TX1 */
    #define STW_MSG_TX1_MSG_TX1_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX1_MSG_TX1_FIELD_OFFSET                       0x00

/* MSG_TX2 Register Fields */
    /* MSG_TX2 -> MSG_TX2 */
    #define STW_MSG_TX2_MSG_TX2_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX2_MSG_TX2_FIELD_OFFSET                       0x00

/* MSG_TX3 Register Fields */
    /* MSG_TX3 -> MSG_TX3 */
    #define STW_MSG_TX3_MSG_TX3_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX3_MSG_TX3_FIELD_OFFSET                       0x00

/* MSG_TX4 Register Fields */
    /* MSG_TX4 -> MSG_TX4 */
    #define STW_MSG_TX4_MSG_TX4_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX4_MSG_TX4_FIELD_OFFSET                       0x00

/* MSG_TX5 Register Fields */
    /* MSG_TX5 -> MSG_TX5 */
    #define STW_MSG_TX5_MSG_TX5_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX5_MSG_TX5_FIELD_OFFSET                       0x00

/* MSG_TX6 Register Fields */
    /* MSG_TX6 -> MSG_TX6 */
    #define STW_MSG_TX6_MSG_TX6_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX6_MSG_TX6_FIELD_OFFSET                       0x00

/* MSG_TX7 Register Fields */
    /* MSG_TX7 -> MSG_TX7 */
    #define STW_MSG_TX7_MSG_TX7_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX7_MSG_TX7_FIELD_OFFSET                       0x00

/* MSG_TX8 Register Fields */
    /* MSG_TX8 -> MSG_TX8 */
    #define STW_MSG_TX8_MSG_TX8_FIELD_MASK                         0xFF /* Message packet content to be sent to transmitter via ASK modulation (see DIR_CMG register) */
    #define STW_MSG_TX8_MSG_TX8_FIELD_OFFSET                       0x00

/* EPT_MSG Register Fields */
    /* EPT_MSG -> EPT_MSG */
    #define STW_EPT_MSG_EPT_MSG_FIELD_MASK                         0xFF /* EPT Message (root cause event) added to EPT packet (see DIR_CMD register) */
    #define STW_EPT_MSG_EPT_MSG_FIELD_OFFSET                       0x00

/* FOD_CTC Register Fields */
    /* FOD_CTC -> FOD_CTC */
    #define STW_FOD_CTC_FOD_CTC_FIELD_MASK                         0xFF /* FOD Current Threshold Calibration */
    #define STW_FOD_CTC_FOD_CTC_FIELD_OFFSET                       0x00

/* FOD_GSC Register Fields */
    /* FOD_GSC -> FOD_GSC */
    #define STW_FOD_GSC_FOD_GSC_FIELD_MASK                         0xFF /* FOD Gain Scaler Calibration */
    #define STW_FOD_GSC_FOD_GSC_FIELD_OFFSET                       0x00

/* FOD_OLC Register Fields */
    /* FOD_OLC -> FOD_OLC */
    #define STW_FOD_OLC_FOD_OLC_FIELD_MASK                         0xFF /* FOD Offset Level Calibration */
    #define STW_FOD_OLC_FOD_OLC_FIELD_OFFSET                       0x00

/* FOD_DCR Register Fields */
    /* FOD_DCR -> FOD_DCR */
    #define STW_FOD_DCR_FOD_DCR_FIELD_MASK                         0xFF /* Coil DC-Resistance for FOD calculation */
    #define STW_FOD_DCR_FOD_DCR_FIELD_OFFSET                       0x00

/* VRECT_RE Register Fields */
    /* VRECT_RE -> VRECT_RE */
    #define STW_VRECT_RE_VRECT_RE_FIELD_MASK                       0xFFFF /* Voltage Regulation Error (difference in mV) between actual and target VRECT used to calculate CEP for 0x0091 the transmitter */
    #define STW_VRECT_RE_VRECT_RE_FIELD_OFFSET                     0x0000

/* RPP_TX Register Fields */
    /* RPP_TX -> RPP_TX */
    #define STW_RPP_TX_RPP_TX_FIELD_MASK                           0xFFFF /* Received Power (comprehensive of losses) level Packet sent to transmitter */
    #define STW_RPP_TX_RPP_TX_FIELD_OFFSET                         0x0000

/* SS_MIN_TX Register Fields */
    /* SS_MIN_TX -> SS_MIN_TX */
    #define STW_SS_MIN_TX_SS_MIN_TX_FIELD_MASK                     0xFF /* Minimum Signal-Strength level for proceeding to PING phase */
    #define STW_SS_MIN_TX_SS_MIN_TX_FIELD_OFFSET                   0x00

/* CS_OFFS Register Fields */
    /* CS_OFFS -> CS_OFFS */
    #define STW_CS_OFFS_CS_OFFS_FIELD_MASK                         0xFF /* Current sensor offset adjustment (in mA) */
    #define STW_CS_OFFS_CS_OFFS_FIELD_OFFSET                       0x00

/* IDLE_CC Register Fields */
    /* IDLE_CC -> IDLE_CC */
    #define STW_IDLE_CC_IDLE_CC_FIELD_MASK                         0xFF /* Chip idle current consumption (in mA) */
    #define STW_IDLE_CC_IDLE_CC_FIELD_OFFSET                       0x00

/* PMAX_PTC Register Fields */
    /* PMAX_PTC -> Max_Power */
    #define STW_PMAX_PTC_MAX_POWER_FIELD_MASK                      0x1F /* Maximum power capability established during Power Transfer Contract */
    #define STW_PMAX_PTC_MAX_POWER_FIELD_OFFSET                    0x00

/* TRECT_OTP Register Fields */
    /* TRECT_OTP -> TRECT_OTP */
    #define STW_TRECT_OTP_TRECT_OTP_FIELD_MASK                     0xFFFF /* Over-Temperature detection Threshold related to Rectifier Temperature sensor */
    #define STW_TRECT_OTP_TRECT_OTP_FIELD_OFFSET                   0x0000

/* TLR_OTP Register Fields */
    /* TLR_OTP -> TLR_OTP */
    #define STW_TLR_OTP_TLR_OTP_FIELD_MASK                         0xFFFF /* Over-Temperature detection Threshold related to main Linear Regulator Temperature sensor */
    #define STW_TLR_OTP_TLR_OTP_FIELD_OFFSET                       0x0000

/* VNTC_OTP Register Fields */
    /* VNTC_OTP -> VNTC_OTP */
    #define STW_VNTC_OTP_VNTC_OTP_FIELD_MASK                       0xFFFF /* Over-Temperature detection Threshold related to external NTC pin */
    #define STW_VNTC_OTP_VNTC_OTP_FIELD_OFFSET                     0x0000

/* PROT_EN0 Register Fields */
    /* PROT_EN0 -> Flags */
    #define STW_PROT_EN0_TRECT_OTP_EN                              0x01 /* Trect_OTP_En */
    #define STW_PROT_EN0_TLR_OTP_EN                                0x02 /* Tlr_OTP_En */
    #define STW_PROT_EN0_VNTC_OTP_EN                               0x04 /* Vntc_OTP_En */
    #define STW_PROT_EN0_TSHDN_OTP_EN                              0x08 /* Tshdn_OTP_En */

/* PROT_EN1 Register Fields */
    /* PROT_EN1 -> Flags */
    #define STW_PROT_EN1_ADJ_OVPS_EN                               0x01 /* Adj_OVPS_ En */
    #define STW_PROT_EN1_FXD_OVPS_EN                               0x02 /* Fxd_OVPS_En */

/* PROT_EN2 Register Fields */
    /* PROT_EN2 -> Flags */
    #define STW_PROT_EN2_IRECT_OCP_EN                              0x01 /* Irect_OCP_en */

/* PROT_EPT0 Register Fields */
    /* PROT_EPT0 -> Flags */
    #define STW_PROT_EPT0_TRECT_OTP_EPT_REQ                        0x01 /* Trect_OTP_EPT_Req */
    #define STW_PROT_EPT0_TLR_OTP_EPT_REQ                          0x02 /* Tlr_OTP_EPT_Req */
    #define STW_PROT_EPT0_VNTC_OTP_EPT_REQ                         0x04 /* Vntc_OTP_EPT_Req */

/* PROT_EPT1 Register Fields */
    /* PROT_EPT1 -> Flags */
    #define STW_PROT_EPT1_ADJ_OVPS_EPT_REQ                         0x01 /* Adj_OVPS_EPT_Req */
    #define STW_PROT_EPT1_FXD_OVPS_EPT_REQ                         0x02 /* Fxd_OVPS_EPT_Req */

/* PROT_EPT2 Register Fields */
    /* PROT_EPT2 -> Flags */
    #define STW_PROT_EPT2_IRECT_OCP_EPT_REQ                        0x01 /* Irect_OCP_EPT_Req */

/* PROT_OD0 Register Fields */
    /* PROT_OD0 -> Flags */
    #define STW_PROT_OD0_TRECT_OTP_OUT_DISC                        0x01 /* Trect_OTP_ Out_Disc */
    #define STW_PROT_OD0_TLR_OTP_OUT_DISC                          0x02 /* Tlr_OTP_Out_Disc */
    #define STW_PROT_OD0_VNTC_OTP_OUT_DISC                         0x04 /* Vntc_OTP_Out_Disc */

/* PROT_OD1 Register Fields */
    /* PROT_OD1 -> Flags */
    #define STW_PROT_OD1_VRECT_OVP_OUT_DISC                        0x01 /* Vrect_OVP_Out_Disc */

/* PROT_OD2 Register Fields */
    /* PROT_OD2 -> Flags */
    #define STW_PROT_OD2_IRECT_OCP_OUT_DISC                        0x01 /* Irect_OCP_Out_Disc */

/* GPIO6_FS Register Fields */
    /* GPIO6_FS -> GPIO6_FS */
    #define STW_GPIO6_FS_GPIO6_FS_FIELD_MASK                       0xFF /* GPIO6 (INT pin) pin Function Selector */
    #define STW_GPIO6_FS_GPIO6_FS_FIELD_OFFSET                     0x00

/* VRECT_ADC Register Fields */
    /* VRECT_ADC -> VRECT_ADC */
    #define STW_VRECT_ADC_VRECT_ADC_FIELD_MASK                     0xFFFF /* VRECT voltage ADC reading (in mV) */
    #define STW_VRECT_ADC_VRECT_ADC_FIELD_OFFSET                   0x0000

/* VOUT_ADC Register Fields */
    /* VOUT_ADC -> VOUT_ADC */
    #define STW_VOUT_ADC_VOUT_ADC_FIELD_MASK                       0xFFFF /* VOUT voltage ADC reading (in mV) */
    #define STW_VOUT_ADC_VOUT_ADC_FIELD_OFFSET                     0x0000

/* IRECT_ADC Register Fields */
    /* IRECT_ADC -> IRECT_ADC */
    #define STW_IRECT_ADC_IRECT_ADC_FIELD_MASK                     0xFFFF /* IRECT current ADC reading (in mA) */
    #define STW_IRECT_ADC_IRECT_ADC_FIELD_OFFSET                   0x0000

/* TRECT_ADC Register Fields */
    /* TRECT_ADC -> TRECT_ADC */
    #define STW_TRECT_ADC_TRECT_ADC_FIELD_MASK                     0xFFFF /* Rectifier Temperature sensor ADC reading (in °C) */
    #define STW_TRECT_ADC_TRECT_ADC_FIELD_OFFSET                   0x0000

/* TLR_ADC Register Fields */
    /* TLR_ADC -> TLR_ADC */
    #define STW_TLR_ADC_TLR_ADC_FIELD_MASK                         0xFFFF /* Main Linear Regulator Temperature sensor ADC reading (in °C) */
    #define STW_TLR_ADC_TLR_ADC_FIELD_OFFSET                       0x0000

/* VNTC_ADC Register Fields */
    /* VNTC_ADC -> VNTC_ADC */
    #define STW_VNTC_ADC_VNTC_ADC_FIELD_MASK                       0xFFFF /* External NTC pin Voltage ADC reading (in mV) */
    #define STW_VNTC_ADC_VNTC_ADC_FIELD_OFFSET                     0x0000


/*******************************************************************************
  Default Values                                                                              
*******************************************************************************/


/*******************************************************************************
  Flag Set/Clear/Check                                                                             
*******************************************************************************/

/**
  *@brief sets flags on device
  *@param dev ptr to stwlc68 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define stw_set_flag(dev, reg, mask) regdev_set_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief clears flags on device
  *@param dev ptr to stwlc68 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define stw_clear_flag(dev, reg, mask) regdev_clear_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief checks flags on device
  *@param dev ptr to stwlc68 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  *@return true if all flags in mask are set 
  *@return false if any flags in mask are not set
  */
#define stw_check_flag(dev, reg, mask) regdev_check_flags(&(dev)->mRegDev,(reg), (mask))

/*******************************************************************************
  Field Getters                                                                              
*******************************************************************************/

/**
 * @brief reads the CHIP_ID field from the CHIP_ID register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_chip_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mChipId, STW_CHIP_ID_CHIP_ID_FIELD_MASK )
/**
 * @brief reads the CHIP_REV field from the CHIP_REV register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_chip_rev(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mChipRev, STW_CHIP_REV_CHIP_REV_FIELD_MASK )
/**
 * @brief reads the ROM_ID field from the ROM_ID register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_rom_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mRomId, STW_ROM_ID_ROM_ID_FIELD_MASK )
/**
 * @brief reads the CFG_ID field from the CFG_ID register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_cfg_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mCfgId, STW_CFG_ID_CFG_ID_FIELD_MASK )
/**
 * @brief reads the TRIM_ID field from the TRIM_ID register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_trim_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTrimId, STW_TRIM_ID_TRIM_ID_FIELD_MASK )
/**
 * @brief reads the PATCH_ID field from the PATCH_ID register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_patch_id(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPatchId, STW_PATCH_ID_PATCH_ID_FIELD_MASK )
/**
 * @brief reads the Trimming_Sector_Error field from the SYS_ERR1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_sys_err1_trimming_sector_error(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSysErr1, STW_SYS_ERR1_TRIMMING_SECTOR_ERROR_FIELD_MASK )
/**
 * @brief reads the Configuration_Sector_Error field from the SYS_ERR1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_sys_err1_configuration_sector_error(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSysErr1, STW_SYS_ERR1_CONFIGURATION_SECTOR_ERROR_FIELD_MASK )
/**
 * @brief reads the Patch_Sector_Error field from the SYS_ERR1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_sys_err1_patch_sector_error(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSysErr1, STW_SYS_ERR1_PATCH_SECTOR_ERROR_FIELD_MASK )
/**
 * @brief reads the Chip_Info_Sector_Error field from the SYS_ERR1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_sys_err1_chip_info_sector_error(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSysErr1, STW_SYS_ERR1_CHIP_INFO_SECTOR_ERROR_FIELD_MASK )
/**
 * @brief reads the OTP_Memory_Trimming_Sector_Error field from the SYS_ERR2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_sys_err2_otp_memory_trimming_sector_error(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSysErr2, STW_SYS_ERR2_OTP_MEMORY_TRIMMING_SECTOR_ERROR_FIELD_MASK )
/**
 * @brief reads the AC_FREQ field from the AC_FREQ register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_ac_freq(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAcFreq, STW_AC_FREQ_AC_FREQ_FIELD_MASK )
/**
 * @brief reads the S_STR_TX field from the S_STR_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_s_str_tx(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSStrTx, STW_S_STR_TX_S_STR_TX_FIELD_MASK )
/**
 * @brief reads the VOUT_SET field from the VOUT_SET register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vout_set(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVoutSet, STW_VOUT_SET_VOUT_SET_FIELD_MASK )
/**
 * @brief reads the VTH_AOE field from the VTH_AOE register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vth_aoe(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVthAoe, STW_VTH_AOE_VTH_AOE_FIELD_MASK )
/**
 * @brief reads the LCR_To_NCR_Hysteresis field from the LCR_HYST register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_lcr_hyst_lcr_to_ncr_hysteresis(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mLcrHyst, STW_LCR_HYST_LCR_TO_NCR_HYSTERESIS_FIELD_MASK )
/**
 * @brief reads the Dummy_Load_Current field from the IDMYL_SET register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_idmyl_set_dummy_load_current(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIdmylSet, STW_IDMYL_SET_DUMMY_LOAD_CURRENT_FIELD_MASK )
/**
 * @brief reads the Minimum_VRECT_voltage field from the VRECT_MIN register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vrect_min_minimum_vrect_voltage(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVrectMin, STW_VRECT_MIN_MINIMUM_VRECT_VOLTAGE_FIELD_MASK )
/**
 * @brief reads the VDROP_V0 field from the VDROP_V0 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_v0(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropV0, STW_VDROP_V0_VDROP_V0_FIELD_MASK )
/**
 * @brief reads the VDROP_V1 field from the VDROP_V1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_v1(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropV1, STW_VDROP_V1_VDROP_V1_FIELD_MASK )
/**
 * @brief reads the VDROP_V2 field from the VDROP_V2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_v2(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropV2, STW_VDROP_V2_VDROP_V2_FIELD_MASK )
/**
 * @brief reads the VDROP_V3 field from the VDROP_V3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_v3(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropV3, STW_VDROP_V3_VDROP_V3_FIELD_MASK )
/**
 * @brief reads the VDROP_C1 field from the VDROP_C1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_c1(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropC1, STW_VDROP_C1_VDROP_C1_FIELD_MASK )
/**
 * @brief reads the VDROP_C2 field from the VDROP_C2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_c2(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropC2, STW_VDROP_C2_VDROP_C2_FIELD_MASK )
/**
 * @brief reads the VDROP_C3 field from the VDROP_C3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vdrop_c3(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVdropC3, STW_VDROP_C3_VDROP_C3_FIELD_MASK )
/**
 * @brief reads the MSG_TX0 field from the MSG_TX0 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx0(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx0, STW_MSG_TX0_MSG_TX0_FIELD_MASK )
/**
 * @brief reads the MSG_TX1 field from the MSG_TX1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx1(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx1, STW_MSG_TX1_MSG_TX1_FIELD_MASK )
/**
 * @brief reads the MSG_TX2 field from the MSG_TX2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx2(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx2, STW_MSG_TX2_MSG_TX2_FIELD_MASK )
/**
 * @brief reads the MSG_TX3 field from the MSG_TX3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx3(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx3, STW_MSG_TX3_MSG_TX3_FIELD_MASK )
/**
 * @brief reads the MSG_TX4 field from the MSG_TX4 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx4(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx4, STW_MSG_TX4_MSG_TX4_FIELD_MASK )
/**
 * @brief reads the MSG_TX5 field from the MSG_TX5 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx5(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx5, STW_MSG_TX5_MSG_TX5_FIELD_MASK )
/**
 * @brief reads the MSG_TX6 field from the MSG_TX6 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx6(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx6, STW_MSG_TX6_MSG_TX6_FIELD_MASK )
/**
 * @brief reads the MSG_TX7 field from the MSG_TX7 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx7(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx7, STW_MSG_TX7_MSG_TX7_FIELD_MASK )
/**
 * @brief reads the MSG_TX8 field from the MSG_TX8 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_msg_tx8(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMsgTx8, STW_MSG_TX8_MSG_TX8_FIELD_MASK )
/**
 * @brief reads the EPT_MSG field from the EPT_MSG register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_ept_msg(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mEptMsg, STW_EPT_MSG_EPT_MSG_FIELD_MASK )
/**
 * @brief reads the FOD_CTC field from the FOD_CTC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_fod_ctc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mFodCtc, STW_FOD_CTC_FOD_CTC_FIELD_MASK )
/**
 * @brief reads the FOD_GSC field from the FOD_GSC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_fod_gsc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mFodGsc, STW_FOD_GSC_FOD_GSC_FIELD_MASK )
/**
 * @brief reads the FOD_OLC field from the FOD_OLC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_fod_olc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mFodOlc, STW_FOD_OLC_FOD_OLC_FIELD_MASK )
/**
 * @brief reads the FOD_DCR field from the FOD_DCR register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_fod_dcr(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mFodDcr, STW_FOD_DCR_FOD_DCR_FIELD_MASK )
/**
 * @brief reads the VRECT_RE field from the VRECT_RE register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vrect_re(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVrectRe, STW_VRECT_RE_VRECT_RE_FIELD_MASK )
/**
 * @brief reads the RPP_TX field from the RPP_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_rpp_tx(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mRppTx, STW_RPP_TX_RPP_TX_FIELD_MASK )
/**
 * @brief reads the SS_MIN_TX field from the SS_MIN_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_ss_min_tx(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mSsMinTx, STW_SS_MIN_TX_SS_MIN_TX_FIELD_MASK )
/**
 * @brief reads the CS_OFFS field from the CS_OFFS register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_cs_offs(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mCsOffs, STW_CS_OFFS_CS_OFFS_FIELD_MASK )
/**
 * @brief reads the IDLE_CC field from the IDLE_CC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_idle_cc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIdleCc, STW_IDLE_CC_IDLE_CC_FIELD_MASK )
/**
 * @brief reads the Max_Power field from the PMAX_PTC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_pmax_ptc_max_power(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mPmaxPtc, STW_PMAX_PTC_MAX_POWER_FIELD_MASK )
/**
 * @brief reads the TRECT_OTP field from the TRECT_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_trect_otp(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTrectOtp, STW_TRECT_OTP_TRECT_OTP_FIELD_MASK )
/**
 * @brief reads the TLR_OTP field from the TLR_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_tlr_otp(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTlrOtp, STW_TLR_OTP_TLR_OTP_FIELD_MASK )
/**
 * @brief reads the VNTC_OTP field from the VNTC_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vntc_otp(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVntcOtp, STW_VNTC_OTP_VNTC_OTP_FIELD_MASK )
/**
 * @brief reads the GPIO6_FS field from the GPIO6_FS register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_gpio6_fs(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mGpio6Fs, STW_GPIO6_FS_GPIO6_FS_FIELD_MASK )
/**
 * @brief reads the VRECT_ADC field from the VRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vrect_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVrectAdc, STW_VRECT_ADC_VRECT_ADC_FIELD_MASK )
/**
 * @brief reads the VOUT_ADC field from the VOUT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vout_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVoutAdc, STW_VOUT_ADC_VOUT_ADC_FIELD_MASK )
/**
 * @brief reads the IRECT_ADC field from the IRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_irect_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mIrectAdc, STW_IRECT_ADC_IRECT_ADC_FIELD_MASK )
/**
 * @brief reads the TRECT_ADC field from the TRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_trect_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTrectAdc, STW_TRECT_ADC_TRECT_ADC_FIELD_MASK )
/**
 * @brief reads the TLR_ADC field from the TLR_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_tlr_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTlrAdc, STW_TLR_ADC_TLR_ADC_FIELD_MASK )
/**
 * @brief reads the VNTC_ADC field from the VNTC_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_get_vntc_adc(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVntcAdc, STW_VNTC_ADC_VNTC_ADC_FIELD_MASK )


/*******************************************************************************
  Field Setters                                                                              
*******************************************************************************/

/**
 * @brief writes the AC_FREQ field to the AC_FREQ register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_ac_freq(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAcFreq, STW_AC_FREQ_AC_FREQ_FIELD_MASK , (val) )
/**
 * @brief writes the S_STR_TX field to the S_STR_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_s_str_tx(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mSStrTx, STW_S_STR_TX_S_STR_TX_FIELD_MASK , (val) )
/**
 * @brief writes the VOUT_SET field to the VOUT_SET register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vout_set(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVoutSet, STW_VOUT_SET_VOUT_SET_FIELD_MASK , (val) )
/**
 * @brief writes the VTH_AOE field to the VTH_AOE register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vth_aoe(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVthAoe, STW_VTH_AOE_VTH_AOE_FIELD_MASK , (val) )
/**
 * @brief writes the LCR_To_NCR_Hysteresis field to the LCR_HYST register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_lcr_hyst_lcr_to_ncr_hysteresis(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mLcrHyst, STW_LCR_HYST_LCR_TO_NCR_HYSTERESIS_FIELD_MASK , (val) )
/**
 * @brief writes the Dummy_Load_Current field to the IDMYL_SET register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_idmyl_set_dummy_load_current(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mIdmylSet, STW_IDMYL_SET_DUMMY_LOAD_CURRENT_FIELD_MASK , (val) )
/**
 * @brief writes the Minimum_VRECT_voltage field to the VRECT_MIN register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vrect_min_minimum_vrect_voltage(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVrectMin, STW_VRECT_MIN_MINIMUM_VRECT_VOLTAGE_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_V0 field to the VDROP_V0 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_v0(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropV0, STW_VDROP_V0_VDROP_V0_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_V1 field to the VDROP_V1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_v1(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropV1, STW_VDROP_V1_VDROP_V1_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_V2 field to the VDROP_V2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_v2(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropV2, STW_VDROP_V2_VDROP_V2_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_V3 field to the VDROP_V3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_v3(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropV3, STW_VDROP_V3_VDROP_V3_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_C1 field to the VDROP_C1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_c1(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropC1, STW_VDROP_C1_VDROP_C1_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_C2 field to the VDROP_C2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_c2(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropC2, STW_VDROP_C2_VDROP_C2_FIELD_MASK , (val) )
/**
 * @brief writes the VDROP_C3 field to the VDROP_C3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vdrop_c3(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVdropC3, STW_VDROP_C3_VDROP_C3_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX0 field to the MSG_TX0 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx0(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx0, STW_MSG_TX0_MSG_TX0_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX1 field to the MSG_TX1 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx1(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx1, STW_MSG_TX1_MSG_TX1_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX2 field to the MSG_TX2 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx2(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx2, STW_MSG_TX2_MSG_TX2_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX3 field to the MSG_TX3 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx3(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx3, STW_MSG_TX3_MSG_TX3_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX4 field to the MSG_TX4 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx4(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx4, STW_MSG_TX4_MSG_TX4_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX5 field to the MSG_TX5 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx5(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx5, STW_MSG_TX5_MSG_TX5_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX6 field to the MSG_TX6 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx6(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx6, STW_MSG_TX6_MSG_TX6_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX7 field to the MSG_TX7 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx7(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx7, STW_MSG_TX7_MSG_TX7_FIELD_MASK , (val) )
/**
 * @brief writes the MSG_TX8 field to the MSG_TX8 register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_msg_tx8(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mMsgTx8, STW_MSG_TX8_MSG_TX8_FIELD_MASK , (val) )
/**
 * @brief writes the EPT_MSG field to the EPT_MSG register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_ept_msg(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mEptMsg, STW_EPT_MSG_EPT_MSG_FIELD_MASK , (val) )
/**
 * @brief writes the FOD_CTC field to the FOD_CTC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_fod_ctc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mFodCtc, STW_FOD_CTC_FOD_CTC_FIELD_MASK , (val) )
/**
 * @brief writes the FOD_GSC field to the FOD_GSC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_fod_gsc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mFodGsc, STW_FOD_GSC_FOD_GSC_FIELD_MASK , (val) )
/**
 * @brief writes the FOD_OLC field to the FOD_OLC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_fod_olc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mFodOlc, STW_FOD_OLC_FOD_OLC_FIELD_MASK , (val) )
/**
 * @brief writes the FOD_DCR field to the FOD_DCR register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_fod_dcr(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mFodDcr, STW_FOD_DCR_FOD_DCR_FIELD_MASK , (val) )
/**
 * @brief writes the VRECT_RE field to the VRECT_RE register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vrect_re(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVrectRe, STW_VRECT_RE_VRECT_RE_FIELD_MASK , (val) )
/**
 * @brief writes the RPP_TX field to the RPP_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_rpp_tx(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mRppTx, STW_RPP_TX_RPP_TX_FIELD_MASK , (val) )
/**
 * @brief writes the SS_MIN_TX field to the SS_MIN_TX register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_ss_min_tx(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mSsMinTx, STW_SS_MIN_TX_SS_MIN_TX_FIELD_MASK , (val) )
/**
 * @brief writes the CS_OFFS field to the CS_OFFS register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_cs_offs(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mCsOffs, STW_CS_OFFS_CS_OFFS_FIELD_MASK , (val) )
/**
 * @brief writes the IDLE_CC field to the IDLE_CC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_idle_cc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mIdleCc, STW_IDLE_CC_IDLE_CC_FIELD_MASK , (val) )
/**
 * @brief writes the Max_Power field to the PMAX_PTC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_pmax_ptc_max_power(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mPmaxPtc, STW_PMAX_PTC_MAX_POWER_FIELD_MASK , (val) )
/**
 * @brief writes the TRECT_OTP field to the TRECT_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_trect_otp(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mTrectOtp, STW_TRECT_OTP_TRECT_OTP_FIELD_MASK , (val) )
/**
 * @brief writes the TLR_OTP field to the TLR_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_tlr_otp(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mTlrOtp, STW_TLR_OTP_TLR_OTP_FIELD_MASK , (val) )
/**
 * @brief writes the VNTC_OTP field to the VNTC_OTP register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vntc_otp(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVntcOtp, STW_VNTC_OTP_VNTC_OTP_FIELD_MASK , (val) )
/**
 * @brief writes the GPIO6_FS field to the GPIO6_FS register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_gpio6_fs(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mGpio6Fs, STW_GPIO6_FS_GPIO6_FS_FIELD_MASK , (val) )
/**
 * @brief writes the VRECT_ADC field to the VRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vrect_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVrectAdc, STW_VRECT_ADC_VRECT_ADC_FIELD_MASK , (val) )
/**
 * @brief writes the VOUT_ADC field to the VOUT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vout_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVoutAdc, STW_VOUT_ADC_VOUT_ADC_FIELD_MASK , (val) )
/**
 * @brief writes the IRECT_ADC field to the IRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_irect_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mIrectAdc, STW_IRECT_ADC_IRECT_ADC_FIELD_MASK , (val) )
/**
 * @brief writes the TRECT_ADC field to the TRECT_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_trect_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mTrectAdc, STW_TRECT_ADC_TRECT_ADC_FIELD_MASK , (val) )
/**
 * @brief writes the TLR_ADC field to the TLR_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_tlr_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mTlrAdc, STW_TLR_ADC_TLR_ADC_FIELD_MASK , (val) )
/**
 * @brief writes the VNTC_ADC field to the VNTC_ADC register 
 * @param dev ptr to stwlc68 device
 */
#define stw_set_vntc_adc(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mVntcAdc, STW_VNTC_ADC_VNTC_ADC_FIELD_MASK , (val) )

/*******************************************************************************
  Configs                                                                            
*******************************************************************************/

